/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*> lists) { // by-reference դարձրել եմ by-value հնարավոր memory leak-ից խուսափելու համար
        if(!lists.size())
        {
            return nullptr; 
        }

        ListNode* merged_list_head = new ListNode();
        int min = 0;
        bool all_null = 1;
        ListNode* merged_list = merged_list_head;

        while(1)
        {
            all_null = 1;
            for(min = 0; min < lists.size(); ++min)
            {
               if(lists[min] != nullptr)//min = O(n)
               {
                   all_null = 0;
                   break;
               } 
            }

            if(all_null)
            {
                break;
            }

            for(int i = min + 1; i < lists.size(); ++i) //O(n - min)
            {
                if(lists[i] != nullptr)
                {
                    
                    if(lists[min] -> val > lists[i] -> val)
                    {
                        min = i;
                    }
                }
                
            }

            if(lists[min])
            {
                merged_list -> next  = new ListNode(lists[min]->val);
                merged_list = merged_list -> next;
                lists[min] = lists[min] -> next;
            }
            
        }
        return merged_list_head -> next;
    }
}; // k - լիստերի միջին երկարություն O((min + n - min)*k) = O(n*k)
